package com.bms;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.ResourceBundle;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.bms.server.DMSSocketServer;

public class VJ_BatteryMonitoringSystem_TcpListener_Main {
	public static SimpleDateFormat gDateFormate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); // HH means 24 and hh
																								// means 12

	static Logger logger = LoggerFactory.getLogger(VJ_BatteryMonitoringSystem_TcpListener_Main.class.getName());
	// private static org.apache.logging.log4j.Logger logger =
	// LogManager.getLogger();
	static ResourceBundle rb = ResourceBundle.getBundle("portConfig", Locale.getDefault());

	static String packet = "2355502C434841524745522D30322C31383A31373A30332C31302F31322F323032342C30000B43485F4D4E4C494E4532354B5631302F31322F32303234000101001414FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000000000000000000000000000000059380000000000000000000000000000000000000000000000002710000000000000000000000000000040000000000000000000000000000000000000A8332E";

	public static void main(String[] args) {
		serverRunnig();
//      localRunning();
		// testmethods();

	}

	public static void localRunning() {
		// new
		// RawDataProcessing().packetProcess

		// GeneralData _GeneralData=new
		// GeneralDataParser().parseData("2355502C474152424D53303030312C31363A33343A30302C31372F31322F323031392C30000B56414A5241424D53313930303133302F30332F323031380001050A2020FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000005C41F93BAD0000000000000000423BF69E41CC04F842CB4C6C00000000000015363FA156703FE14AED00000000000000000000000600000000016401520000000027882E");
		// System.out.println(_GeneralData.toString());
		// String
		// packet="2355502C474152424D53303030312C31363A33343A30302C31372F31322F323031392C30000B56414A5241424D53313930303133302F30332F323031380001050A2020FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000005C41F93BAD0000000000000000423BF69E41CC04F842CB4C6C00000000000015363FA156703FE14AED00000000000000000000000600000000016401520000000027882E";

		String errorPacket = "2355502C434841524745522D30312C30383A32393A30322C33302F31312F323032342C304346C00040B8000042480000447A0400000000002E"
				+ "";
		// String
		// errorPacket="2355462C56414A524157424D53312C31323A35303A30382C31392F31322F323031392C30000B56414A524157424D533030303131382F31322F32303139000506082020FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF132E03EB41FC41E742AFD2D44084D82E4173D95341CE97DF44030E3B000000AA000006CC3E57CDC74097F0860000000041968BD50000000900000000014E030107150000E28631000B56414A524157424D533030303131382F31322F32303139000506082020FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF132E03EB41FC41E742AFD2D44084D82E4173D95341CE97DF44030E3B000000AA000006CC3E57CDC74097F0860000000041968BD50000000900000000014E030107150000E2862E";
		new BMSDataProcessing().packetProcess(packet);

		// BMSAlarmStatus _bMSAlarmStatus=new BMSAlarmStatusParser().parse("00030200");
		// System.out.println("data:"+_bMSAlarmStatus.toString());
		// int bytecount=36;
		// DeviceDataWithLastIndex _batteryMonitoringDataWithLastIndex=new
		// BatteryMonitoringDataParser().parse(bytecount, packet);

		// List<CellVoltageData> _listCellVoltageData=new ArrayList<CellVoltageData>();
		// Collections.copy(_listCellVoltageData,
		// _batteryMonitoringDataWithLastIndex.getBatteryMonitoringData().getCellVoltageData());
		// _listCellVoltageData=_batteryMonitoringDataWithLastIndex.getBatteryMonitoringData().getCellVoltageData();

		// System.out.println("bytecount "+bytecount);

		// BMSAlarmStatus _bMSAlarmStatus= new BMSAlarmStatusParser().parse("0001050A");
		// System.out.println(_bMSAlarmStatus.toString());

		// String
		// cellvoltagePacket="FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF";
		// String
		// celltempPacket="FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF";

		// new CellVoltageTemperatureDataParser().parse(cellvoltagePacket);

	}

	public static void testmethods() {
		// String
		// pck
		// new MongodbRawDataSaving().mongodbRawDataInsertion(pck);
		for (int i = 0; i < 20000; i++) {
			Date dt = new Date();
			logger.info("i:" + i + " Checking....." + gDateFormate.format(dt));
		}

	}

	public static void mangoDbData() {

	}

	public static void serverRunnig() {
		try {
			new DMSSocketServer().portListening(Integer.parseInt(rb.getString("portNumber").trim()));// for Bms
		} catch (Exception ex) {
			System.out.println("ServerRunning issue:" + ex);
		}
	}

	public static void testing() {
		new BMSDataProcessing().packetProcess("testing");
	}
}
